{"version":3,"sources":["components/upload/stripe_logo.svg","components/upload/Upload.js","components/checkout/Success.js","components/checkout/Fail.js","components/checkout/Checkout.js","components/instructions/Instructions.js","App.js","reportWebVitals.js","index.js"],"names":["Upload","stripePromise","history","useHistory","useState","year","setYear","type","setType","email","setEmail","files","setFiles","fullName","setFullName","validEmail","setValidEmail","submitted","setSubmitted","showModal","setShowModal","coupon","setCoupon","isValidCoupon","setIfIsValidCoupon","errorMessage","setErrorMessage","canSubmit","length","handleSubmit","a","formData","FormData","statements","document","querySelector","i","append","stripe","baseUrl","process","axios","post","headers","btoa","uploadResponse","requestId","data","request_id","checkoutResponse","sessionID","id","redirectToCheckout","sessionId","error","push","response","description","Container","fluid","Row","className","Col","justify-content-md-center","sm","Form","FormText","onClick","e","preventDefault","Group","controlId","Label","Dropdown","DropdownButton","title","variant","onSelect","Item","eventKey","File","onChange","fNames","target","name","label","multiple","custom","Text","muted","map","fName","Control","placeholder","value","console","log","pattern","RegExp","test","toLowerCase","uuidValidate","Button","block","style","color","backgroundColor","cursor","Image","src","logo","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","Modal","size","aria-labelledby","centered","Header","Title","Spinner","animation","role","defaultCopyButtonLabel","clickedCopyButtonLabel","SuccessCheckout","props","state","requestCopyButtonLabel","couponCopyButtonLabel","handleRequestIDCopyClick","setState","setTimeout","handleCouponCopyClick","this","then","res","catch","err","FormLabel","InputGroup","FormControl","disabled","Append","text","React","Component","SuccessCheckoutWithRouter","withRouter","FailCheckout","copyRequestIdButtonLabel","setCopyRequestIdButtonLabel","contactMail","trim","href","md","Checkout","query","URLSearchParams","useLocation","search","ri","get","success","Success","Fail","Instructions","showExampleModal","setShowExampleModal","rel","ButtonGroup","Body","Footer","loadStripe","App","Navbar","collapseOnSelect","expand","bg","Toggle","aria-controls","Collapse","Nav","to","Link","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5fa11a0e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/stripe_logo.1fd88ea7.svg\";","import * as React from \"react\";\nimport {useState} from \"react\";\nimport {validate as uuidValidate} from 'uuid';\nimport {\n    Button,\n    Col,\n    Container,\n    Dropdown,\n    DropdownButton,\n    Form,\n    FormText,\n    Image,\n    Modal,\n    OverlayTrigger,\n    Row,\n    Spinner,\n    Tooltip\n} from \"react-bootstrap\";\nimport './Uplaod.css'\nimport logo from './stripe_logo.svg'\nimport axios from \"axios\";\nimport {Link, useHistory} from \"react-router-dom\";\n\nfunction Upload({stripePromise}) {\n    const history = useHistory();\n\n    const defaultFormFileTitle = 'nothing selected';\n\n    const [year, setYear] = useState('2020')\n    const [type, setType] = useState('')\n    const [email, setEmail] = useState('')\n    const [files, setFiles] = useState([])\n    const [fullName, setFullName] = useState('')\n    const [validEmail, setValidEmail] = useState(false)\n    const [submitted, setSubmitted] = useState(false)\n    const [showModal, setShowModal] = useState(false)\n    const [coupon, setCoupon] = useState(\"\")\n    const [isValidCoupon, setIfIsValidCoupon] = useState(false)\n    const [errorMessage, setErrorMessage] = useState('')\n\n    const handleSelectYear = (e) => {\n        setYear(e)\n    }\n\n    const handleSelectType = (e) => {\n        setType(e)\n    }\n\n    const handleSelectedFiles = (e) => {\n        const fNames = []\n        for (let i = 0; i < e.target.files.length; i++) {\n            fNames.push(e.target.files[i].name)\n        }\n        setFiles(fNames)\n    }\n\n    const handleEmailChange = (e) => {\n        setEmail(e.target.value)\n        const pattern = new RegExp(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n\n        if (e.target.value != null) {\n            setValidEmail(pattern.test(e.target.value.toLowerCase()))\n        }\n    }\n\n    const handleFullNameChange = (e) => {\n        setFullName(e.target.value)\n        console.log(e.target.value)\n    }\n\n    const getFileControlTitle = () => {\n        if (files.length === 0) {\n            return defaultFormFileTitle;\n        }\n\n        if (files.length === 1) {\n            return \"1 file selected\";\n        } else {\n            return files.length + \" files selected\";\n        }\n    }\n\n    const canSubmit = () => {\n        return year !== '' && type !== '' && files.length > 0 && validEmail && fullName !== ''\n    }\n\n    const handleCouponChange = (e) => {\n        if (coupon.length + (e.target.value.length - coupon.length) > 36) {\n            return\n        }\n        if (uuidValidate(e.target.value)) {\n            setIfIsValidCoupon(true)\n        } else {\n            setIfIsValidCoupon(false)\n        }\n        setCoupon(e.target.value)\n        setErrorMessage('')\n    }\n\n    const handleSubmit = async () => {\n        if (submitted) {\n            return\n        }\n\n        setErrorMessage('')\n        setSubmitted(true)\n        setShowModal(true)\n        const formData = new FormData();\n        const statements = document.querySelector('#statements');\n        for (let i = 0; i < statements.files.length; i++) {\n            formData.append('statements', statements.files[i])\n        }\n\n        formData.append('type', type)\n        formData.append('year', year)\n        formData.append('email', email)\n        formData.append('fullName', fullName)\n        formData.append('coupon', coupon)\n\n        try {\n            const stripe = await stripePromise\n\n            const baseUrl = process.env.REACT_APP_API_BASE_URL;\n\n            const uploadResponse = await axios.post(`${baseUrl}/api/statements/upload`, formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\",\n                    \"X-API-KEY\": btoa(process.env.REACT_APP_CLIENT_TOKEN)\n                }\n            })\n            const requestId = uploadResponse.data.request_id;\n\n            if (!isValidCoupon) {\n                const checkoutResponse = await axios.post(`${baseUrl}/api/payments/create-checkout-session`,\n                    {\n                        \"request_id\": requestId,\n                    }, {\n                        headers: {\n                            \"X-API-KEY\": btoa(process.env.REACT_APP_CLIENT_TOKEN)\n                        }\n                    })\n                const sessionID = checkoutResponse.data.id\n                const result = await stripe.redirectToCheckout({\n                    sessionId: sessionID,\n                });\n\n                if (result.error) {\n                    history.push(\"/checkout?success=false&request_id=\" + requestId)\n                }\n            } else {\n                history.push(`/checkout?success=true&coupon=${coupon}&request_id=${requestId}`)\n            }\n        } catch (err) {\n            if (err.response && err.response.data && err.response.data.description) {\n                setErrorMessage(err.response.data.description)\n                return;\n            }\n            history.push(`/checkout?success=false`)\n        } finally {\n            setSubmitted(false)\n            setShowModal(false)\n        }\n    }\n\n    const handleInstructions = (e) => {\n        e.preventDefault()\n        history.push(\"/instructions\")\n    }\n\n    return (\n        <Container fluid id=\"upload-container\">\n            <Row className=\"justify-content-md-center\">\n                <Col justify-content-md-center sm={15}>\n                    <Form>\n                        <FormText>Make sure you read <Link onClick={handleInstructions}>this</Link> first</FormText>\n                        <br/>\n                        <Form.Group className={\"text-center\"}>\n                            <FormText><h4>Submit new request</h4></FormText>\n                        </Form.Group>\n                        <Form.Group controlId=\"formUploadYear\" id='form-group-year-dd'>\n                            <Form.Label className={\"text-start\"}>Select year</Form.Label>\n                            <Dropdown>\n                                <DropdownButton title={year !== '' ? year : 'select'} variant=\"outline-dark\"\n                                                id=\"dropdown-year\"\n                                                onSelect={handleSelectYear}>\n                                    <Dropdown.Item eventKey=\"2020\">2020</Dropdown.Item>\n                                </DropdownButton>\n                            </Dropdown>\n                        </Form.Group>\n                        <Form.Group controlId=\"formUploadType\">\n                            <Form.Label className={\"text-start\"}>Select type</Form.Label>\n                            <Dropdown>\n                                <DropdownButton title={type !== '' ? type : 'select'}\n                                                variant=\"outline-dark\" id=\"dropdown-type\"\n                                                onSelect={handleSelectType}>\n                                    <Dropdown.Item eventKey=\"revolut\">revolut</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"etoro\">etoro</Dropdown.Item>\n                                </DropdownButton>\n                            </Dropdown>\n                        </Form.Group>\n                        <Form.Group controlId=\"formUploadStatements\">\n                            <Form.Label className={\"text-start\"}>Select statements</Form.Label>\n                            <Form.File onChange={handleSelectedFiles}\n                                       label={getFileControlTitle()}\n                                       id='statements'\n                                       type=\"file\" name=\"statements\" multiple custom/>\n                            {files.length === 0\n                                ? <Form.Text muted>\n                                    Tax calculations will be applied on selected files for {year}\n                                </Form.Text>\n                                : files.map((fName, i) =>\n                                    <Form.Text key={i} muted>\n                                        {fName}\n                                    </Form.Text>)\n                            }\n                        </Form.Group>\n                        <Form.Group controlId=\"formFullName\" id='form-group-full-name'>\n                            <Form.Label className={\"text-start\"}>Name</Form.Label>\n                            <Form.Control type=\"input\" placeholder=\"Enter name\"\n                                          onChange={handleFullNameChange}/>\n                        </Form.Group>\n                        <Form.Group controlId=\"formEmail\" id='form-group-email-id'>\n                            <Form.Label className={\"text-start\"}>Email</Form.Label>\n                            <Form.Control type=\"input\" placeholder=\"example@domain.com\"\n                                          onChange={handleEmailChange}/>\n                            <Form.Text muted>\n                                You will receive your report on the provided email\n                            </Form.Text>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formCoupon\" id='form-group-coupon'>\n                            <Form.Label className={\"text-start\"}>Coupon</Form.Label>\n                            <Form.Control type=\"input\" placeholder=\"Enter coupon if available\"\n                                          value={coupon}\n                                          onChange={handleCouponChange}/>\n                            <Form.Text muted>\n                                Skip payments if valid code\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group controlId=\"formSubmitButton\" id='form-group-submit-btn-id'>\n                            {\n                                canSubmit() && isValidCoupon ?\n                                    <Button title=\"submit\" variant=\"success\"\n                                            onClick={handleSubmit}\n                                            block>\n                                        Submit\n                                    </Button> :\n                                    (!canSubmit() ?\n                                            <OverlayTrigger\n                                                placement=\"top\"\n                                                delay={{show: 250, hide: 400}}\n                                                overlay={\n                                                    <Tooltip>\n                                                        Select statements, type and input your name and email to submit\n                                                    </Tooltip>\n                                                }>\n                                                <Button title=\"submit\"\n                                                        className=\"btn-outline-dark\"\n                                                        style={{\n                                                            color: \"#FFF\",\n                                                            backgroundColor: \"#5433FF\"\n                                                        }}>\n                                                    Submit and checkout with\n                                                    <Image className='align-content-end' src={logo}/>\n                                                </Button>\n                                            </OverlayTrigger> :\n                                            <Button title=\"submit\"\n                                                    className=\"btn-outline-dark\"\n                                                    onClick={handleSubmit}\n                                                    style={{\n                                                        color: \"#FFF\",\n                                                        backgroundColor: \"#5433FF\",\n                                                        cursor: \"pointer\"\n                                                    }}>\n                                                Submit and checkout with\n                                                <Image className='align-content-end' src={logo}/>\n                                            </Button>\n                                    )\n                            }\n                            <FormText className=\"text-danger\">{errorMessage}</FormText>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n            <Modal\n                size=\"md\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                show={showModal}\n            >\n                <Modal.Header>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Processing request &nbsp;\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                    </Modal.Title>\n                </Modal.Header>\n            </Modal>\n        </Container>\n    )\n}\n\nexport default Upload;","import {Button, Form, FormControl, FormLabel, FormText, InputGroup} from \"react-bootstrap\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\nimport {withRouter} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport React from 'react';\nimport axios from \"axios\";\n\nconst defaultCopyButtonLabel = \"Copy\";\nconst clickedCopyButtonLabel = \"Copied\";\n\nclass SuccessCheckout extends React.Component {\n\n    static propTypes = {\n        history: PropTypes.object.isRequired\n    };\n\n    requestId = this.props.requestId\n    state = {\n        coupon: \"\",\n        requestCopyButtonLabel: defaultCopyButtonLabel,\n        couponCopyButtonLabel: defaultCopyButtonLabel,\n    }\n\n    componentDidMount() {\n        const baseUrl = process.env.REACT_APP_API_BASE_URL;\n        axios.post(`${baseUrl}/api/payments/obtain-coupon`,\n            {\n                \"request_id\": this.requestId,\n            }, {\n                headers: {\n                    \"X-API-KEY\": btoa(process.env.REACT_APP_CLIENT_TOKEN)\n                }\n            })\n            .then(res => {\n                const coupon = res.data.coupon\n                if (this.state.coupon !== \"\" && coupon === \"\") {\n                    return\n                }\n                this.setState({...this.state, coupon})\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    handleRequestIDCopyClick = () => {\n        this.setState({...this.state, requestCopyButtonLabel: clickedCopyButtonLabel})\n        setTimeout(() =>\n            this.setState({...this.state, requestCopyButtonLabel: defaultCopyButtonLabel}), 500\n        )\n    }\n\n    handleCouponCopyClick = () => {\n        this.setState({...this.state, couponCopyButtonLabel: clickedCopyButtonLabel})\n        setTimeout(() =>\n            this.setState({...this.state, couponCopyButtonLabel: defaultCopyButtonLabel}), 500\n        )\n    }\n\n    render() {\n        const {history} = this.props;\n        return (\n            <Form>\n                <Form.Group>\n                    <FormText className=\"text-center\">\n                        <h4>Your request was processed successfully and a report is on its way to your mailbox</h4>\n                    </FormText>\n                </Form.Group>\n                <br/>\n                <Form.Group>\n                    <FormLabel>Request ID</FormLabel>\n                    <InputGroup className=\"mb-2\">\n                        <FormControl\n                            value={this.requestId}\n                            disabled\n                            className=\"text-center\"\n                            placeholder=\"\"\n                        />\n                        <InputGroup.Append>\n                            <CopyToClipboard text={this.requestId}>\n                                <Button disabled={this.requestId == null || this.requestId === \"\"}\n                                        variant={\"outline-secondary\"}\n                                        onClick={this.handleRequestIDCopyClick}>{this.state.requestCopyButtonLabel}</Button>\n                            </CopyToClipboard>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Form.Group>\n                <br/>\n                <Form.Group>\n                    <FormLabel>Coupon code</FormLabel>\n                    <InputGroup className=\"mb-2\">\n                        <FormControl\n                            value={this.state.coupon}\n                            disabled\n                            className=\"text-center\"\n                            placeholder=\"\"\n                        />\n                        <InputGroup.Append>\n                            <CopyToClipboard text={this.state.coupon}>\n                                <Button disabled={this.state.coupon === \"\"}\n                                        variant={\"outline-secondary\"}\n                                        onClick={this.handleCouponCopyClick}>{this.state.couponCopyButtonLabel}</Button>\n                            </CopyToClipboard>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Form.Group>\n                <br/>\n                <br/>\n                <Button block onClick={() => history.push(\"/\")}>Try again</Button>\n            </Form>\n        )\n    }\n}\n\nconst SuccessCheckoutWithRouter = withRouter(SuccessCheckout);\n\nexport default SuccessCheckoutWithRouter;","import {Button, Form, FormControl, FormText, InputGroup, Row} from \"react-bootstrap\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\nimport React, {useState} from \"react\";\nimport {useHistory} from 'react-router-dom';\n\nfunction FailCheckout({requestId}) {\n    const history = useHistory();\n\n    const defaultCopyButtonLabel = \"Copy\";\n    const clickedCopyButtonLabel = \"Copied\";\n\n    let [copyRequestIdButtonLabel, setCopyRequestIdButtonLabel] = useState(defaultCopyButtonLabel);\n    const contactMail = process.env.REACT_APP_CONTACT_EMAIL;\n\n    const handleRequestIDCopyClick = () => {\n        setCopyRequestIdButtonLabel(clickedCopyButtonLabel)\n        setTimeout(() =>\n            setCopyRequestIdButtonLabel(defaultCopyButtonLabel), 500\n        )\n    }\n    return (\n        requestId != null && requestId.trim(\" \") !== \"\" ?\n            <Form>\n                <Form.Group>\n                    <FormText className=\"text-center\"><h4>Unfortunately, we could not process your payment</h4>\n                    </FormText>\n                </Form.Group>\n                <br/>\n                <Form.Group>\n                    <InputGroup className=\"mb-2\">\n                        <FormControl\n                            value={requestId}\n                            disabled\n                            className=\"text-center\"\n                            placeholder=\"\"\n                        />\n                        <InputGroup.Append>\n                            <CopyToClipboard text={requestId}>\n                                <Button variant={\"outline-secondary\"}\n                                        onClick={handleRequestIDCopyClick}>{copyRequestIdButtonLabel}</Button>\n                            </CopyToClipboard>\n                        </InputGroup.Append>\n                    </InputGroup>\n                    <FormText>\n                        Above is your request ID. Please try submitting another request or send this to <a\n                        href={\"mailto:\" + contactMail}\n                        className={\"border-bottom\"}>{contactMail}</a> and ask for details\n                    </FormText>\n                </Form.Group>\n                <br/>\n                <br/>\n                <Button block onClick={() => history.push(\"/\")}>Try again</Button>\n            </Form> :\n            <Form>\n                <Form.Group>\n                    <FormText className=\"text-center\"><h4>Your request failed</h4>\n                    </FormText>\n                </Form.Group>\n                <br/>\n                <Form.Group>\n                    <p>\n                        You were not charged for this operation. If this happened more than once please\n                        contact <a\n                        href={\"mailto:\" + contactMail}\n                        className={\"border-bottom\"}>{contactMail}</a> for more details.\n                        Sorry for the inconvenience.\n                    </p>\n                </Form.Group>\n                <br/>\n                <br/>\n                <Row md={15} className={\"justify-content-md-center\"}>\n                    <Button onClick={() => history.push(\"/\")}>Try again</Button>\n                </Row>\n            </Form>\n    )\n}\n\nexport default FailCheckout;","import {useLocation} from \"react-router-dom\";\nimport SuccessCheckoutWithRouter from \"./Success\";\nimport FailCheckout from \"./Fail\";\nimport './Checkout.css'\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport * as React from \"react\";\n\nfunction useQuery() {\n    return new URLSearchParams(useLocation().search);\n}\n\nfunction Checkout() {\n    let query = useQuery()\n    let ri = query.get(\"request_id\")\n    let success = query.get(\"success\")\n\n    return (\n        <Container fluid id=\"checkout-container\">\n            <Row className=\"justify-content-md-center\">\n                <Col className=\"justify-content-md-center\" md={7} sm={15}>\n                    {\n                        success === \"true\" ?\n                            <SuccessCheckoutWithRouter requestId={ri}/> :\n                            <FailCheckout requestId={ri}/>\n                    }\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Checkout;","import {Button, ButtonGroup, Container, Form, FormText, Modal,} from \"react-bootstrap\";\nimport './Instructions.css'\nimport {useHistory} from \"react-router-dom\";\nimport {useState} from \"react\";\n\nfunction Instructions() {\n\n    const history = useHistory();\n    let [showExampleModal, setShowExampleModal] = useState(false)\n\n    const handleGoToSubmit = (e) => {\n        e.preventDefault()\n        history.push(\"/\")\n    }\n\n    const handleExampleModalClose = (e) => {\n        e.preventDefault()\n        setShowExampleModal(false)\n    }\n\n    const handleExampleModalShow = (e) => {\n        e.preventDefault()\n        setShowExampleModal(true)\n    }\n\n    return (\n        <>\n            <Container id=\"instructions-container\">\n                <Form>\n                    <FormText>\n                        <section id={\"motivation\"}>\n                            <header>\n                                <h4>\n                                    Motivation\n                                </h4>\n                            </header>\n                            <br/>\n                            <p>\n                                I'm a Bulgarian individual and software developer who does day trading. Most likely you\n                                are\n                                trading with shares too, and that's why you are here.\n                            </p>\n                            <p>\n                                After several unsuccessful attempts to negotiate a reasonable price with accountants for\n                                the\n                                audit of several thousand transactions per year, broken down to multiple PDFs and other\n                                type\n                                of e-files, I decided to collect the required information and prepare the needed\n                                calculations for the Bulgarian NRA myself.\n                            </p>\n                            <p>\n                                <strong>\n                                    Just a few things to note first:\n                                    <ul>\n                                        <li>\n                                            there may be a discrepancy with the amount of annual tax calculated by your\n                                            accountant and the online service - I do not undertake any responsibility in\n                                            this regard\n                                        </li>\n                                        <li>\n                                            this is a paid service - I believe that time is priceless, and the time and\n                                            effort I invested, combined with the time and money you can save, they can\n                                            be\n                                            put together for a symbolic price.\n                                        </li>\n                                        <li>\n                                            the domain is pretty fresh and that is the only service in my portfolio I am\n                                            offering at the moment; the complete lack of information about the author\n                                            and\n                                            the services offered may be a big no go, but you are free to pass anyways.\n                                            For more info you can reach me at <a\n                                            href={`mailto:${process.env.REACT_APP_CONTACT_EMAIL}`}>{process.env.REACT_APP_CONTACT_EMAIL}</a>\n                                        </li>\n                                        <li>\n                                            right now the service works with trades placed in USD only\n                                        </li>\n                                        <li>\n                                            there are foreigners that are happy to use the service and declare taxes to\n                                            the Bulgarian NRA, so the page is in English.\n                                        </li>\n                                    </ul>\n                                </strong>\n                            </p>\n                        </section>\n                        <br/>\n                        <section id={\"personal-data\"}>\n                            <header>\n                                <h4>\n                                    Export statements from eToro or Revolut\n                                </h4>\n                            </header>\n                            <br/>\n                            <p>\n                                If you need your taxes from <strong>eToro</strong> calculated, then you might want to\n                                export\n                                an <strong>Excel</strong> statement in the scope of the target year and maybe a month\n                                after\n                                (e.g. 01-01-2020 - 31.01.2021). It's also fine if you break down the statements to\n                                several\n                                files. You should include January (next year) in your report if you want to get a list\n                                of\n                                the open positions you carried over.\n                            </p>\n                            <p>\n                                For <strong>Revolut</strong> you should export statements for all months you want to\n                                include\n                                in the report. Again, make sure to attach next year's January to get carried over\n                                positions.\n                            </p>\n                            <br/>\n                        </section>\n                        <section id={\"statements\"}>\n                            <header>\n                                <h4>\n                                    About that statement files themselves\n                                </h4>\n                            </header>\n                            <br/>\n                            <p>\n                                There is no limit to the number of files you can attach and submit. Just make sure they\n                                are:\n                                <ul>\n                                    <li>no more than <strong>5 mb in total</strong></li>\n                                    <li>\n                                        in the correct format - <strong>PDF</strong> for Revolut\n                                        and <strong>XLSX/XLS</strong> for eToro\n                                    </li>\n                                    <li>the statements are from the target year</li>\n                                    <li>\n                                        the right files - any other files in the correct format will be accepted, but\n                                        they\n                                        won't\n                                        be red accurately and you will get inadequate results\n                                    </li>\n                                </ul>\n                            </p>\n                            <br/>\n                        </section>\n                        <section id={\"submission\"}>\n                            <header>\n                                <h4>\n                                    The submission\n                                </h4>\n                            </header>\n                            <br/>\n                            <p>\n                                <ol>\n                                    <li>\n                                        Select target year (it is set to 2020 by default) and report type from the\n                                        dropdowns.\n                                    </li>\n                                    <li>\n                                        Browse and attach your statement files.\n                                    </li>\n                                    <li>\n                                        Enter your email and full names in the text fields - these are required as you\n                                        will\n                                        get\n                                        your report on your email. You may enter Gin Tonic in the name field if you\n                                        like. We\n                                        don't judge anybody on how they prefer to be called. Just make sure that the\n                                        email\n                                        is\n                                        correct.\n                                    </li>\n                                    <li>\n                                        Use a coupon if you have one. The coupon lets you submit your statements without\n                                        paying\n                                        anything.<br/>You will get your coupon when you do your first submission. You\n                                        can\n                                        use\n                                        the code <strong>two</strong> more times for the <strong>same report type and\n                                        email</strong>.\n                                    </li>\n                                </ol>\n                                Once you fill everything needed hit the button at the end of the form and you will be\n                                redirected\n                                to a success/fail page with your request ID and coupon code.<br/>If all goes well you\n                                will\n                                receive an email with your report. If not please contact <a\n                                href={`mailto:${process.env.REACT_APP_CONTACT_EMAIL}`}>{process.env.REACT_APP_CONTACT_EMAIL}</a> for\n                                more details.\n                            </p>\n                            <br/>\n                        </section>\n                        <section id={\"personal-data\"}>\n                            <header>\n                                <h4>\n                                    Your data\n                                </h4>\n                            </header>\n                            <br/>\n                            <p>\n                                Personal data is kept for 48 hours and deleted afterwards.\n                            </p>\n                        </section>\n                        <br/>\n                        <section id={\"payments\"}>\n                            <header>\n                                <h4>\n                                    Payments\n                                </h4>\n                            </header>\n                            <br/>\n                            <p>\n                                Payments are made via the <a href={\"https://stripe.com/\"} rel={\"noreferrer\"}\n                                                             target={\"_blank\"}>Stripe</a> platform.\n                                After the server receives your request you will be redirected to a checkout page, hosted\n                                in\n                                Stripe, using secure connection. Then you should input your card details. Your request\n                                will\n                                cost you <strong>10 BGN</strong> and you will get a coupon code if you need to re-submit\n                                your data.\n                            </p>\n                            <p>\n                                Once on the checkout page you will have\n                            </p>\n                        </section>\n                        <br/>\n                        <section id={\"calculations\"}>\n                            <header>\n                                <h4>\n                                    The calculations\n                                </h4>\n                            </header>\n                            <br/>\n                            <p>\n                                The calculations will output the information needed to fill <a\n                                href=\"https://nra.bg/document?id=19524\">annex 5</a> and <a\n                                href=\"https://nra.bg/document?id=19527\">annex 8</a> in your\n                                declarations. Тhe official exchange rates for the corresponding day and date of the\n                                transaction are taken into account.\n                            </p>\n                            <p>\n                                If the statements you provide are exhaustive enough, you will get:\n                                <ul>\n                                    <li>\n                                        a list of your open positions that were carried over from the previous year with\n                                        their:\n                                        <ul>\n                                            <li>average USD price (if you bought the stock several times before carrying\n                                                it\n                                                over)\n                                            </li>\n                                            <li>average BGN price</li>\n                                            <li>open date</li>\n                                            <li>total units</li>\n                                            <li>name and token of the stock in the position</li>\n                                        </ul>\n                                    </li>\n                                    <li>\n                                        dividends:\n                                        <ul>\n                                            <li>gross amount received</li>\n                                            <li>net amount received</li>\n                                            <li>taxes - there are some things to consider like if the dividends are\n                                                already\n                                                taxed and by what amount, but if this is greater than 0 you'll have to\n                                                pay\n                                                it to the NRA\n                                            </li>\n                                        </ul>\n                                    </li>\n                                    <li>\n                                        transactions summarization:\n                                        <ul>\n                                            <li>total buy amount</li>\n                                            <li>total sell amount</li>\n                                            <li>taxes - the amount to pay to the NRA. <strong>Note if that is less than\n                                                0,\n                                                then you owe nothing or you can use the amount to reverse the tax amount\n                                                of\n                                                some of your other report types. If you are а legal entity you can use\n                                                that sum to reverse taxes next year.</strong>\n                                            </li>\n                                        </ul>\n                                    </li>\n                                </ul>\n                            </p>\n                            <p><a href=\"#\" onClick={handleExampleModalShow}>Check the example report right now</a></p>\n                        </section>\n                    </FormText>\n                    <br/>\n                    <br/>\n                    <Form.Group id=\"buttons-container\">\n                        <ButtonGroup>\n                            <Button onClick={handleGoToSubmit}>Submit request</Button>\n                        </ButtonGroup>\n                    </Form.Group>\n                    <Modal size=\"xl\" show={showExampleModal}>\n                        <Modal.Header>\n                            <Modal.Title>Sample report</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <p>Hi Stranger,<br/>\n                                <br/>\n                                Here are the results of the tax calculations you requested with inquiry ID\n                                da761eca-da04-49fd-809c-5e719d63a0a2 (2020):<br/>\n                                <br/>\n                                ----------------------------------------<br/>\n                                Operations (BGN):<br/>\n                                ----------------------------------------<br/>\n                                Total sell amount: XXX XXX,XX<br/>\n                                Total buy amount: XXX XXX,XX<br/>\n                                Total tax: XXX,XX<br/>\n                                <br/>\n                                ----------------------------------------<br/>\n                                Dividends (BGN):<br/>\n                                ----------------------------------------<br/>\n                                Net amount: XXX,XX<br/>\n                                Gross amount: XXXX,XX<br/>\n                                Total tax: XXX,XX<br/>\n                                <br/>\n                                ----------------------------------------<br/>\n                                Transferred positions 2020 (XX):<br/>\n                                ----------------------------------------<br/>\n                                1 | Date: 11-11-2020 | Token: TSLA | Name: Tesla, Inc. | Avg price (USD): XXX,XX | Avg\n                                price (BGN): XXX,XX | Units: XX,XXX |<br/>\n                                ---------------------<br/>\n                                2 | Date: 19-11-2020 | Token: GME | Name: GameStop | Avg price (USD): XXX,XX | Avg\n                                price (BGN): XXX,XX | Units: XX,XXX |<br/>\n                                ---------------------<br/>\n                                3 | Date: 20-11-2020 | Token: FVRR | Name: Fiverr | Avg price (USD): XXX,XX | Avg\n                                price (BGN): XXX,XX | Units: XXX,XXX |<br/>\n                                <br/>\n                                Use the following coupon to submit two more times: 4430ba64-06cd-4572-bedb-1cc9135422b1.\n                                It is bound to the current report type and your email only.<br/>\n                            </p>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <ButtonGroup>\n                                <Button variant=\"secondary\" onClick={handleExampleModalClose}>Close</Button>\n                            </ButtonGroup>\n                        </Modal.Footer>\n                    </Modal>\n                </Form>\n            </Container>\n        </>\n    )\n}\n\nexport default Instructions;","import './App.css';\nimport Upload from \"./components/upload/Upload\";\nimport {Container, Nav, Navbar} from \"react-bootstrap\";\nimport {loadStripe} from \"@stripe/stripe-js/pure\";\nimport {Elements} from \"@stripe/react-stripe-js\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport Checkout from \"./components/checkout/Checkout\";\nimport {LinkContainer} from 'react-router-bootstrap'\nimport Instructions from \"./components/instructions/Instructions\";\n\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_SECRET);\n\nfunction App() {\n    return (\n        <HashRouter>\n            <div className=\"App\">\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <LinkContainer to={\"/\"}>\n                                <Nav.Link href=\"\">Submit statements</Nav.Link>\n                            </LinkContainer>\n                            <LinkContainer to={\"/instructions\"}>\n                                <Nav.Link href=\"\">Instructions</Nav.Link>\n                            </LinkContainer>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n\n                <Switch>\n                    <Container>\n                        <Route path=\"/\" exact>\n                            <Elements stripe={stripePromise}>\n                                <Upload stripePromise={stripePromise}/>\n                            </Elements>\n                        </Route>\n                        <Route path=\"/checkout\">\n                            <Checkout/>\n                        </Route>\n                        <Route path=\"/instructions\">\n                            <Instructions/>\n                        </Route>\n                    </Container>\n                </Switch>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}