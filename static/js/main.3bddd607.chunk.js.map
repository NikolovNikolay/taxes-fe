{"version":3,"sources":["components/upload/Upload.js","App.js","reportWebVitals.js","index.js"],"names":["Upload","useState","year","setYear","type","setType","email","setEmail","files","setFiles","fullName","setFullName","validEmail","setValidEmail","submitted","setSubmitted","requestID","setRequestID","requestStatus","setRequestStatus","showModal","setShowModal","showAlert","setShowAlert","Container","fluid","id","Row","Col","md","Form","Group","controlId","File","onChange","e","fNames","i","target","length","push","name","label","multiple","custom","Text","muted","map","fName","Control","className","placeholder","autoComplete","value","pattern","RegExp","test","toLowerCase","Dropdown","DropdownButton","title","variant","alignRight","onSelect","Item","eventKey","Button","onClick","formData","FormData","statements","document","querySelector","append","axios","post","headers","then","res","data","request_id","catch","console","error","response","finally","block","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","Modal","size","aria-labelledby","centered","Header","Title","Body","Footer","Alert","dismissible","text","App","Navbar","bg","Nav","Link","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3bddd607.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {useState} from \"react\";\nimport {\n    Alert,\n    Button,\n    Col,\n    Container,\n    Dropdown,\n    DropdownButton,\n    Form,\n    Modal,\n    OverlayTrigger,\n    Row,\n    Tooltip\n} from \"react-bootstrap\";\nimport './Uplaod.css'\nimport axios from \"axios\";\nimport Skeleton from \"react-loading-skeleton\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\n\nfunction Upload() {\n\n    const statusSuccess = \"SUCCESS\";\n    const statusFail = \"FAILED\";\n\n    const defaultFormFileTitle = 'Select statements';\n    const defaultSubmitModalHeader = 'Submitting request';\n    const completedSubmitModalHeader = 'Submitted';\n\n    const [year, setYear] = useState('2020')\n    const [type, setType] = useState('')\n    const [email, setEmail] = useState('')\n    const [files, setFiles] = useState([])\n    const [fullName, setFullName] = useState('')\n    const [validEmail, setValidEmail] = useState(false)\n    const [submitted, setSubmitted] = useState(false)\n    const [requestID, setRequestID] = useState('')\n    const [requestStatus, setRequestStatus] = useState('')\n    const [showModal, setShowModal] = useState(false)\n    const [showAlert, setShowAlert] = useState(false)\n\n    const handleSelectYear = (e) => {\n        setYear(e)\n    }\n\n    const handleSelectType = (e) => {\n        setType(e)\n    }\n\n    const handleSelectedFiles = (e) => {\n        const fNames = []\n        for (let i = 0; i < e.target.files.length; i++) {\n            fNames.push(e.target.files[i].name)\n        }\n        setFiles(fNames)\n    }\n\n    const handleEmailChange = (e) => {\n        setEmail(e.target.value)\n        //const pattern = new RegExp(/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/i);\n        const pattern = new RegExp(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n\n        setValidEmail(pattern.test(email.toLowerCase()))\n    }\n\n    const handleFullNameChange = (e) => {\n        setFullName(e.target.value)\n    }\n\n    const getFileControlTitle = () => {\n        if (files.length === 0) {\n            return defaultFormFileTitle;\n        }\n\n        if (files.length === 1) {\n            return \"1 file selected\";\n        } else {\n            return files.length + \" files selected\";\n        }\n    }\n\n    const canSubmit = () => {\n        return year !== '' && type !== '' && files.length > 0 && validEmail && fullName !== ''\n    }\n\n    const handleDismissAlert = () => {\n        setShowAlert(false)\n    }\n\n    const handleCopyReqID = () => {\n        setShowAlert(true)\n    }\n\n    const handleModalClose = () => {\n        setShowModal(false)\n        setShowAlert(false)\n        setSubmitted(false)\n        setRequestStatus('')\n        setRequestID('')\n    }\n\n    const handleSubmit = () => {\n        if (submitted) {\n            return\n        }\n\n        setSubmitted(true)\n        setShowModal(true)\n        const formData = new FormData();\n        const statements = document.querySelector('#statements');\n        for (let i = 0; i < statements.files.length; i++) {\n            formData.append('statements', statements.files[i])\n        }\n\n        formData.append('type', type)\n        formData.append('year', year)\n        formData.append('email', email)\n        formData.append('fullName', fullName)\n\n        axios.post('https://taxes-api.digitools-it.com/api/statements/upload', formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        })\n            .then(res => {\n                setRequestID(res.data.request_id)\n                setRequestStatus('SUCCESS')\n            })\n            .catch(e => {\n                console.error(e.response.data)\n                setRequestStatus('FAILED')\n            })\n            .finally(() => {\n                setSubmitted(false)\n            })\n    }\n\n    return (\n        <Container fluid id=\"upload-container\">\n            <Row>\n                <Col/>\n                <Col md={15}>\n                    <Form>\n                        <Form.Group controlId=\"formUploadStatements\">\n                            <Form.File onChange={handleSelectedFiles}\n                                       label={getFileControlTitle()}\n                                       id='statements'\n                                       type=\"file\" name=\"statements\" multiple custom/>\n                            {files.length === 0\n                                ? <Form.Text muted>\n                                    Tax calculations will be applied on selected files\n                                </Form.Text>\n                                : files.map((fName, i) =>\n                                    <Form.Text key={i} muted>\n                                        {fName}\n                                    </Form.Text>)\n                            }\n                        </Form.Group>\n                        <Form.Group controlId=\"formFullName\" id='form-group-full-name'>\n                            <Form.Control type=\"input\" className=\"text-center\" placeholder=\"Full name: eg. John Doe\"\n                                          autoComplete=\"off\"\n                                          onChange={handleFullNameChange}/>\n                        </Form.Group>\n                        <Form.Group controlId=\"formEmail\" id='form-group-email-id'>\n                            <Form.Control type=\"email\" className=\"text-center\" placeholder=\"Your email\"\n                                          autoComplete=\"off\"\n                                          onChange={handleEmailChange}/>\n                            <Form.Text muted>\n                                You will receive your report on the provided email\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group controlId=\"formUploadYear\" id='form-group-year-dd'>\n                            <Dropdown>\n                                <DropdownButton title=\"Select year\" variant=\"outline-dark\" id=\"dropdown-year\"\n                                                alignRight\n                                                onSelect={handleSelectYear}>\n                                    <Dropdown.Item eventKey=\"2020\">2020</Dropdown.Item>\n                                </DropdownButton>\n                                <Form.Text><strong>{year}</strong></Form.Text>\n                            </Dropdown>\n                        </Form.Group>\n                        <Form.Group controlId=\"formUploadType\">\n                            <Dropdown>\n                                <DropdownButton title=\"Select type\"\n                                                variant=\"outline-dark\" id=\"dropdown-type\"\n                                                alignRight\n                                                onSelect={handleSelectType}>\n                                    <Dropdown.Item eventKey=\"revolut\">revolut</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"etoro\">etoro</Dropdown.Item>\n                                </DropdownButton>\n                                <Form.Text><strong>{type}</strong></Form.Text>\n                            </Dropdown>\n                        </Form.Group>\n                        <Form.Group controlId=\"formSubmitButton\" id='form-group-submit-btn-id'>\n                            {\n                                canSubmit() ?\n                                    <Button title=\"submit\" variant=\"success\"\n                                            onClick={handleSubmit}\n                                            block>\n                                        Submit\n                                    </Button> :\n                                    <OverlayTrigger\n                                        placement=\"right\"\n                                        delay={{show: 250, hide: 400}}\n                                        overlay={\n                                            <Tooltip id=\"button-tooltip\">Select statements, type and input email to\n                                                submit\n                                            </Tooltip>\n                                        }>\n                                        <Button title=\"submit\" variant=\"outline-danger\" block>Submit</Button>\n                                    </OverlayTrigger>\n                            }\n                        </Form.Group>\n                    </Form>\n                </Col>\n                <Col/>\n            </Row>\n            <Modal\n                size=\"md\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                show={showModal}\n            >\n                <Modal.Header>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        {requestStatus === '' ? defaultSubmitModalHeader : completedSubmitModalHeader}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h5>Status</h5>\n                    {\n                        requestID === '' ?\n                            <Skeleton/> :\n                            <Form.Text className=\"text-success\">{requestStatus}</Form.Text>\n\n                    }\n                    <br/>\n                    <h5>Request ID</h5>\n                    {\n                        requestID !== '' || requestStatus === statusFail ?\n                            <Form.Text>{requestID}</Form.Text> :\n                            <Skeleton/>\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                    <Alert dismissible onClick={handleDismissAlert} show={showAlert}\n                           variant={\"success\"}>\n                        <Form.Text>Copied <strong> {requestID}</strong> to clipboard</Form.Text>\n                    </Alert>\n                    <CopyToClipboard text={requestID}>\n                        <Button onClick={handleCopyReqID}>Copy request ID</Button>\n                    </CopyToClipboard>\n                    <Button variant=\"danger\" onClick={handleModalClose}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </Container>\n    )\n}\n\nexport default Upload;","import './App.css';\nimport Upload from \"./components/upload/Upload\";\nimport {Container, Nav, Navbar} from \"react-bootstrap\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Instructions</Nav.Link>\n                    <Nav.Link href=\"#upload\">Submit statements</Nav.Link>\n                    <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n                </Nav>\n            </Navbar>\n            <Container>\n                <Upload/>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}